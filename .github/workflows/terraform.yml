name: 'Terraform'

on:
  push:
    branches: [ "main", "master" ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: ["main", "master"]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  issues: write
  pull-requests: write
  contents: write

jobs:
  terraform:

    name: 'Terraform'
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terrafor Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Plan
      id: plan
      if: (github.event_name == 'pull_request') || (github.event.schedule == '0 0 * * *')
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Add PR comment
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      uses: actions/github-script@v6
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      if: (github.ref == 'refs/heads/master' && github.event_name == 'push') || (github.event.schedule == '0 0 * * *')
      run: terraform apply -auto-approve -input=false
